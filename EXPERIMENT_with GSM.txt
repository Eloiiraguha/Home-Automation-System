#include <Wire.h>                // For I2C communication
#include <LiquidCrystal_I2C.h>   // For I2C LCD
#include <Keypad.h>              // For keypad handling
#include <DHT.h>                 // Include the DHT library
#include <SoftwareSerial.h>      // For GSM module communication

// Define the number of rows and columns for the keypad
const byte ROWS = 4; 
const byte COLS = 4; 

// Define the keys in the keypad matrix
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// Define the pin numbers for the rows and columns of the keypad
byte rowPins[ROWS] = {13, 12, 11, 10}; 
byte colPins[COLS] = {9, 8, 7, 6}; 

// Initialize the Keypad object
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Initialize the LCD with I2C address 0x27 and dimensions 16x2
LiquidCrystal_I2C lcd(0x27, 16, 2); 

// DHT sensor setup
#define DHTPIN 24                 // Pin where the DHT11 data pin is connected
#define DHTTYPE DHT11            // Define the type of DHT sensor
#define FAN_PIN 23               // Pin where the fan is connected
DHT dht(DHTPIN, DHTTYPE);        // Initialize the DHT sensor

// Password handling
const String password = "1234"; 
String inputPassword = ""; 

// Relay control
const int relayPin = 5; 

// LDR handling
const int ldrPin = A0; 
const int ledPin = 4; 

// PIR sensor handling
int pirPin = 3;                // signal pin of the PIR sensor
int lastPirVal = LOW;          // the last value of the PIR sensor
int pirVal;                    // the current value of the PIR sensor

// Gas sensor handling
const int gasSensorPin = A5;  // Analog pin connected to the gas sensor
const int buzzerPin = 2;      // Digital pin connected to the buzzer
const int fireThreshold = 152; // Adjust this value based on your sensor

// GSM module handling
SoftwareSerial gsmSerial(7, 8); // RX, TX pins for GSM module
const char* phoneNumber = "+250784687150"; // Replace with your phone number

// Timing constants
#define MINUTE 60000 // for converting milliseconds to a minute
#define SECOND 1000  // for converting milliseconds to a second
const long keypadDisplayTime = 7000; // Display time for keypad (7 seconds)
const long ldrDisplayTime = 5000; // Display time for LDR (5 seconds)
const long pirDisplayTime = 5000; // Display time for PIR (5 seconds)
const long gasDisplayTime = 5000; // Display time for gas sensor (5 seconds)
const long dhtDisplayTime = 5000; // Display time for DHT sensor (5 seconds)

unsigned long previousMillis = 0;
int displayState = 0; // 0: Keypad, 1: LDR, 2: PIR, 3: Gas, 4: DHT

void setup() {
  lcd.init();  // Initialize the LCD
  lcd.backlight();  // Turn on the LCD backlight
  pinMode(relayPin, OUTPUT);  // Set the relay pin as an output
  digitalWrite(relayPin, LOW);  // Ensure the relay is initially off
  pinMode(ledPin, OUTPUT); // Set LED pin as an output
  pinMode(FAN_PIN, OUTPUT); // Set fan pin as an output
  pinMode(pirPin, INPUT);  // declare PIR sensor as input
  pinMode(buzzerPin, OUTPUT);  // Set the buzzer pin as an output
  
  Serial.begin(9600); // Start serial communication for debugging
  gsmSerial.begin(9600); // Start GSM communication
  dht.begin();        // Initialize the DHT sensor
  
  lcd.setCursor(0, 0);
  lcd.print("System Ready!");
  delay(2000);
  lcd.clear();
}

void loop() {
  unsigned long currentMillis = millis();

  // Switch display based on the state
  if (currentMillis - previousMillis >= getDisplayDuration()) {
    previousMillis = currentMillis; // Reset the timer
    displayState = (displayState + 1) % 5; // Cycle through 0, 1, 2, 3, 4
    lcd.clear(); // Clear the LCD for the new display
  }

  switch (displayState) {
    case 0: // Keypad Input
      displayKeypad();
      break;
    case 1: // LDR Reading
      displayLDR();
      break;
    case 2: // PIR Sensor
      displayPIR();
      break;
    case 3: // Gas Sensor
      displayGas();
      break;
    case 4: // DHT Sensor
      displayDHT();
      break;
  }
  
  delay(100); // Short delay to reduce CPU usage
}

void displayKeypad() {
  char key = keypad.getKey();
  
  if (key) {
    // Handle backspace key (*)
    if (key == '*') { 
      if (inputPassword.length() > 0) {
        inputPassword.remove(inputPassword.length() - 1);
      }
    } 
    // Handle enter key (#)
    else if (key == '#') { 
      if (inputPassword == password) {
        lcd.setCursor(0, 0);
        lcd.print("Access Granted");
        digitalWrite(relayPin, HIGH);  
        delay(5000);  
        digitalWrite(relayPin, LOW);  
        inputPassword = "";  
      } else {
        lcd.setCursor(0, 0);
        lcd.print("Access Denied");
        delay(2000);  
        inputPassword = "";  
      }
    } 
    // Handle regular key presses
    else {
      inputPassword += key;
    }
    
    String maskedPassword = repeatString('*', inputPassword.length());
    lcd.setCursor(0, 1);
    lcd.print(maskedPassword);  
  } else {
    lcd.setCursor(0, 0);
    lcd.print("Enter Password:  ");
    lcd.setCursor(0, 1);
    lcd.print(repeatString('*', inputPassword.length()));
  }
}

void displayLDR() {
  int ldrValue = analogRead(ldrPin); 
  lcd.setCursor(0, 0);
  lcd.print("LDR: ");
  lcd.print(ldrValue);
  
  lcd.setCursor(0, 1);
  if (ldrValue < 42) {
    lcd.print("Night Time");
    digitalWrite(ledPin, HIGH); // Turn LED ON during Night Time
  } else {
    lcd.print("Day Time");
    digitalWrite(ledPin, LOW); // Turn LED OFF during Day Time
  }
}

void displayPIR() {
  pirVal = digitalRead(pirPin);  // read current input value
  lcd.setCursor(0, 0);
  
  if (pirVal == HIGH) { // object detected  
    lcd.print("Motion Detected!");
    digitalWrite(ledPin, HIGH);  // turn LED on
    sendSMS("Alert: Motion detected!"); // Send SMS notification
  } else { // no object detected
    lcd.print("No Motion       ");
    digitalWrite(ledPin, LOW); // turn LED off
  }
}

void displayGas() {
  int sensorValue = analogRead(gasSensorPin);
  
  Serial.print("Gas Sensor Value: ");
  Serial.println(sensorValue);
  
  lcd.setCursor(0, 0);
  lcd.print("Gas Value: ");
  lcd.print(sensorValue);

  if (sensorValue > fireThreshold) {
    digitalWrite(buzzerPin, HIGH);
    lcd.setCursor(0, 1);
    lcd.print("Fire detected!");
    sendSMS("Alert: Fire detected!"); // Send SMS notification
    delay(1000); // Buzzer sound duration
    digitalWrite(buzzerPin, LOW);
    delay(1000); // Delay between buzzer sounds
  } else {
    digitalWrite(buzzerPin, LOW);
    lcd.setCursor(0, 1);
    lcd.print("No fire.       ");
  }
}

void displayDHT() {
  float temperature = dht.readTemperature(); // Read the temperature in Celsius
  float humidity = dht.readHumidity();       // Read the humidity

  // Check if the readings were successful
  if (isnan(temperature) || isnan(humidity)) {
    lcd.setCursor(0, 0);
    lcd.print("Failed to read");
    lcd.setCursor(0, 1);
    lcd.print("from DHT sensor");
    return;
  }

  // Display temperature and humidity on LCD
  lcd.clear();                      // Clear the LCD screen
  lcd.setCursor(0, 0);             // Set cursor to the first column of the first row
  lcd.print("Temp: ");
  lcd.print(temperature);          // Print temperature
  lcd.print(" C");

  // Control the fan based on temperature
  if (temperature > 20) {
      digitalWrite(FAN_PIN, HIGH);  // Turn on the fan
  } else {
      digitalWrite(FAN_PIN, LOW);   // Turn off the fan
  }

  lcd.setCursor(0, 1);             // Set cursor to the first column of the second row
  lcd.print("Humidity: ");
  lcd.print(humidity);             // Print humidity
  lcd.print(" %");
}

long getDisplayDuration() {
  switch (displayState) {
    case 0: return keypadDisplayTime; // 7 seconds for keypad
    case 1: return ldrDisplayTime; // 5 seconds for LDR
    case 2: return pirDisplayTime; // 5 seconds for PIR
    case 3: return gasDisplayTime; // 5 seconds for gas sensor
    case 4: return dhtDisplayTime; // 5 seconds for DHT sensor
    default: return 100; // Default case, should not occur
  }
}

// Function to send SMS
void sendSMS(const char* message) {
  gsmSerial.println("AT"); // Check connection
  delay(100);
  gsmSerial.println("AT+CMGF=1"); // Set SMS mode to text
  delay(100);
  gsmSerial.print("AT+CMGS=\""); // Send SMS
  gsmSerial.print(phoneNumber);
  gsmSerial.println("\"");
  delay(100);
  gsmSerial.println(message); // Message text
  delay(100);
  gsmSerial.write(26); // ASCII code of CTRL+Z to send SMS
  delay(1000);
}

// Function to repeat a character
String repeatString(char character, int count) {
  String result = "";
  for (int i = 0; i < count; i++) {
    result += character;
  }
  return result;
}
